

{#
    {{  form_row(edit_form.photosConsultation.vars.prototype.titre) }}
    {{  form_row(edit_form.photosConsultation.vars.prototype.description) }}
#}
<video  id="{{ edit_form.photosConsultation.vars.prototype.datafile.vars.id }}video" class="video" width="320" height="240" autoplay></video><br />
<canvas id="{{ edit_form.photosConsultation.vars.prototype.datafile.vars.id }}canvas" class="canvas" width="640" height="480"></canvas><br />

{{  form_row(edit_form.photosConsultation.vars.prototype.datafile) }}
<br /><a class="remove-photo btn-dels" href="#">Supprimer cette photo</a><br />


<script type="text/javascript">
    function isMobile() {
        try {
            if(/Android|webOS|iPhone|iPad|iPod|pocket|psp|kindle|avantgo|blazer|midori|Tablet|Palm|maemo|plucker|phone|BlackBerry|symbian|IEMobile|mobile|ZuneWP7|Windows Phone|Opera Mini/i.test(navigator.userAgent)) {
                return true;
            };
            return false;
        } catch(e){ console.log("Error in isMobile"); return false; }
    }

$('.remove-photo').click(function(e) {
    e.preventDefault();
    var p = $(this).parent();
    $(p).remove();
    return false;
});


//////////////////////////////////////////////////////////////
/////////////////////////picture part/////////////////////////
//////////////////////////////////////////////////////////////
// Grab elements, create settings, etc.
//----------------------------------------------------------------------
//  Here we list all media devices, in order to choose between
//  the front and the back camera.
//      videoDevices[0] : Front Camera
//      videoDevices[1] : Back Camera
//  I used an array to save the devices ID
//  which i get using devices.forEach()
//  Then set the video resolution.
//----------------------------------------------------------------------
navigator.mediaDevices.enumerateDevices().then(devices => {
    var currentNode, ni;
var videoDevices = [0,0];
var videoDeviceIndex = 0;
devices.forEach(function(device) {
    console.log(device.kind + ": " + device.label + " id = " + device.deviceId);
    console.log("Debug Fab: " + (device.label).indexOf("ear"));
    if (device.kind == "videoinput" && (device.label).indexOf("ear") > -1) {
        videoDevices[videoDeviceIndex++] =  device.deviceId;
    }
});
var constraints =  {width: { min: 1024, ideal: 1280, max: 1920 },
    height: { min: 776, ideal: 720, max: 1080 },
    deviceId: { exact: videoDevices[0]  }
};
return navigator.mediaDevices.getUserMedia({ video: constraints });

})
.then(stream => {
    if (window.URL || window.webkitURL) {
    ni = document.createNodeIterator(document.documentElement, NodeFilter.SHOW_ELEMENT, function(node){
        return node.classList.contains('video') ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
    });

    var winurl = window.URL || window.webkitURL;
    while(currentNode = ni.nextNode()) {
        currentNode.src = winurl.createObjectURL(stream);
        localMediaStream = stream;
    }
//                video.src = window.webkitURL.createObjectURL(stream);
//                localMediaStream = stream;
} else if (video.mozSrcObject !== undefined) {
    ni = document.createNodeIterator(document.documentElement, NodeFilter.SHOW_ELEMENT, function(node){
        return node.classList.contains('video') ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
    });
    while(currentNode = ni.nextNode()) {
        currentNode.mozSrcObject = stream;
    }
    // video.mozSrcObject = stream;
} else if (video.srcObject !== undefined) {
    ni = document.createNodeIterator(document.documentElement, NodeFilter.SHOW_ELEMENT, function(node){
        return node.classList.contains('video') ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
    });
    while(currentNode = ni.nextNode()) {
        currentNode.srcObject = stream;
    }
//                video.srcObject = stream;

} else {
    ni = document.createNodeIterator(document.documentElement, NodeFilter.SHOW_ELEMENT, function(node){
        return node.classList.contains('video') ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
    });
    while(currentNode = ni.nextNode()) {
        currentNode.src = stream;
    }
}
})
.catch(e => console.error(e));

/*

 */
$('.video').click(function(e) {
    var id = this.id;
    var idCanvas = (id.substring(0, id.length - 5)) + 'canvas';
    var idDataFile = (id.substring(0, id.length - 5));

    var canvas = document.getElementById(idCanvas);
    var context = canvas.getContext('2d');
    var video = document.getElementById(id);
    var canvasData = document.createElement('canvas');
    canvasData.width  = 1224;
    canvasData.height = 768;
    canvasData.visible = false;

    var contextData = canvasData.getContext('2d');


    context.drawImage(video, 0, 0, 640, 480);
    contextData.drawImage(video, 0, 0, 1224, 768);
    var image = canvasData.toDataURL("image/png");

    document.getElementById(idDataFile).value = image;

    return false;
});



</script>